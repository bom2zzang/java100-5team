<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
       ">

    <!-- @Component, @Controller, @Service, @Repository 애노테이션이 붙은 
         클래를 찾아 인스턴스를 생성한다. 
         물론 의존 객체도 주입해줄 것이다. -->
    <context:component-scan base-package="java100.app.web">
        <context:exclude-filter type="annotation"
            expression="org.springframework.web.bind.annotation.RestController"/>
    </context:component-scan>


    <!-- 페이지 컨트롤러가 사용할 객체 설정 -->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
                <bean class="org.springframework.http.converter.StringHttpMessageConverter"/>
            </list>
        </property>
    </bean>
    
    <!-- 멀티파트 형식으로 전송된 데이터를 처리할 객체를 등록한다. -->
    <bean id="multipartResolver" 
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="5000000"/>
    </bean>
     
    <!-- 기본 ViewResolver를 교체한다. -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
    
    
    
    <!-- 이 설정 파일에서 사용할 값이 들어 있는 
         프로퍼티 파일을 로딩하는 객체 등록 -->
    <context:property-placeholder location="classpath*:java100/app/jdbc.properties"/>
    
    <!-- DAO 객체를 자동생성해주는 공장 준비 
         => 다음 객체는 지정된 패키지에서 인터페이스를 찾는다.
         => 그리고 그 인터페이스와 대응하는 SQL Mapper를 찾아 
            DAO 객체를 자동으로 생성한다.
            이때 SQL Mapper 파일의 namespace는 
            인터페이스의 이름(패키지명 포함)과 일치해야 한다.
        -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
      <property name="basePackage" value="java100.app.dao" />
    </bean>
    
    
    <!-- 인터셉터를 등록한다 -->
<!--     <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**" />
            <mvc:exclude-mapping path="/auth/**" />
            <mvc:exclude-mapping path="/member/list" />
            <mvc:exclude-mapping path="/member/add" />
            <mvc:exclude-mapping path="/member/form" />
            <mvc:exclude-mapping path="/cody/list" />
            <bean class="java100.app.web.interceptor.AuthInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors> -->
    
    
</beans>







