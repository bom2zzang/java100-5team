<?xml version="1.0" encoding="UTF-8"?>
<!-- SQL문을 다루는 명령문이 들어있다. -->

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <!-- DAO 객체를 자동으로 생성하려면, namespace의 값이 인터페이스 이름과 같아야 한다. -->
<mapper namespace="java100.app.dao.MemberDao">
    
    <resultMap type="member" id="memberMap">
        <id column="no" property="no"/>
        <result column="pwd" property="password"/>
        <result column="regdt" property="createDate"/>
    </resultMap>
    
    
    <!-- select를 실행할 떄 정렬 값을 입력 받기 위해 Map 객체를 파라미터로 받는다. -->
    <select id="findAll" resultMap="memberMap" parameterType="map">
               select no, name, email, regdt from ex_memb
               <if test="names != null">
                   <where>
                       <foreach collection="names" item="name">
                        or name like concat('${name}%')
                       </foreach>
                   </where>
               </if>
               
               order by
               <choose>
                    <when test="orderColumn == 'name' and align == 'desc'">
                        name desc
                    </when>
                    <when test="orderColumn == 'name' and align == 'asc'">
                        name asc
                    </when>
                    <when test="orderColumn == 'regdt' and align == 'asc'">
                        regdt asc
                    </when>
                    <otherwise>
                        regdt desc
                    </otherwise>
               </choose>
               
               limit #{startIndex}, #{size}
    </select>
    
    <select id="countAll" resultType="int" >
        select count(*) from ex_memb;
    </select>
    
    <insert id="insert" parameterType="member">
        insert into ex_memb(name,email,pwd,regdt) values(#{name},#{email},password(#{password}),now())
    </insert>
    
    <update id="update" parameterType="member">
        update ex_memb set name=#{name},email=#{email} where no=#{no}
    </update>
  
    <delete id="delete" parameterType="int">
        delete from ex_memb where no=#{value}
    </delete>
    
    <select id="findByNo" resultMap="memberMap" parameterType="int">
        select no, name, email, pwd, regdt
        from ex_memb where no=#{value}
    </select>
    
    <select id="findByEmailAndPassword" resultMap="memberMap" parameterType="map">
        select no, name, email, pwd, regdt
        from ex_memb where email=#{email} and pwd=password(#{password})
    </select>
    
</mapper>